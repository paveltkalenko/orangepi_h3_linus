#!/bin/bash

# Last update: 2016-9-21
# *****************************************************
# !! REMEMBER TO SET PARAMETERS IN FILE "second-stage *
# *****************************************************
_LOGFILE="create_image.log"
if [ "$(id -u)" != "0" ]; then
   echo "Script must be run as root !"
   exit 0
fi

rm $_LOGFILE
touch $_LOGFILE
#если возникнут ошибки прерываемся
# set -e
echo "Start logfile good" >> $_LOGFILE
echo ""
date
echo -e "\033[36m======================================================="
echo -e "Creating Ubuntu/Debian SD Card instalation for OrangePI"
echo -e "=======================================================\033[37m"
echo ""

_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
cd $_DIR


. params.sh

#===================================================================

# ============================================
if [ "${distro}" = "" ]; then
    echo "Distribution must be specified."
    exit 0
fi
if [ "${repo}" = "" ]; then
    echo "Repository must be specified."
    exit 0
fi
# ============================================

#===================================================================


_excode=0

# **** show progress *******
proc_wait() {
    spin='-\|/'

    i=0
    while kill -0 $1 2>/dev/null
    do
      i=$(( (i+1) %4 ))
      printf "\r$2 ${spin:$i:1}"
      sleep .1
    done
    _excode=$?

    if [ $_excode -eq 0 ]
    then
      printf "\rOK.                        \n"
    else
      printf "\rERROR.                     \n"
    fi
}
# **************************

if [ "${_format}" = "btrfs" ] ; then
    _mntopt="-o compress-force=lzo"
else
    _mntopt=""
fi

# ===================
echo "running format_mainline.sh"
. format_mainline.sh
# ===================

if [ "${odir}" = "" ] || [ "${bootdir}" = "" ]; then
    echo "FATAL ERROR."
    exit 1
fi


echo "# ==================="
echo "# Prepare directories"
echo "# ==================="
if [ ! "${_boot_on_ext4}" = "yes" ] ; then
    if [ ! -d $bootdir ]; then
	mkdir -p $bootdir
    fi
    rm $bootdir/* >> $_LOGFILE 2>&1
    sync
    umount $bootdir >> $_LOGFILE 2>&1
fi


if [ ! -d $odir ]; then
    mkdir -p $odir
fi
rm -rf $odir/* >> $_LOGFILE 2>&1
sync

umount $odir >> $_LOGFILE 2>&1
sleep 1

# ===========================================
# IF USING SD CARD OR IMAGE, MOUNT PARTITIONS
# ===========================================
if [ ! "${sdcard}" = "" ]; then
    echo ""
    echo "Mounting SD Card partitions..."

    if [ ! "${_boot_on_ext4}" = "yes" ] ; then
	if ! mount ${sdcard}1 $bootdir; then
	    echo "ERROR mounting partitions..."
	    exit 1
	fi
	if ! mount ${_mntop} ${sdcard}2 $odir; then
	    echo "ERROR mounting partitions..."
	    umount $bootdir
	    exit 1
	fi
        echo "SD Card partitions mounted to $odir & $bootdir"
    else
	if ! mount ${_mntop} ${sdcard}1 $odir; then
	    echo "ERROR mounting partitions..."
            if [ ! "${_boot_on_ext4}" = "yes" ] ; then
	        umount $bootdir
	    fi
	    exit 1
	fi
	echo "SD Card partition mounted to $odir"
    fi
fi

#===================================================================================================================
# ========================
# DEBOOTSTRAP LINUX DISTRO
# ========================
echo ""

touch $odir/_$distro


debootstrap --arch armhf --foreign --verbose --include=wget ${distro} $odir $repo >> $_LOGFILE 2>&1 &

pid=$!
proc_wait $pid "please wait"
if [ $_excode -ne 0 ]; then
    echo "ERROR IN DEBOOTSTRAP!"
    exit 0
fi

# ***************************
# ** CREATE NEW sources.list:
# ***************************
echo "Creating \"sources.list\""

cat > $odir/sources.list << _EOF_
deb $repo/ $distro main contrib non-free
deb-src $repo/ $distro main contrib non-free

deb $repo/ $distro-updates main contrib non-free
deb-src $repo/ $distro-updates main contrib non-free

deb $repo/ $distro-backports main contrib non-free
deb-src $repo/ $distro-backports main contrib non-free

_EOF_

echo ""
echo -e "\033[36m"
echo "# =============================================="
echo "# Make necessary directories and copy some files"
echo "# =============================================="
echo -e "\033[37m"
echo ""
mkdir -p $odir/etc/default >> $_LOGFILE 2>&1
if [ ! "${_boot_on_ext4}" = "yes" ] ; then
    mkdir -p $odir/media/boot
fi
mkdir -p $odir/usr/local/bin
mkdir -p $odir/usr/bin >> $_LOGFILE 2>&1

cp /etc/timezone $odir/etc
cp /usr/bin/qemu-arm-static $odir/usr/bin
cp second-stage $odir/second-stage
cp params.sh $odir/params.sh
cp pkglist $odir/pkglist
if [ ! "${ONLY_BASE}" = "yes" ] ; then
    cp wallpaper.png $odir/ >> $_LOGFILE 2>&1
fi

echo ""
echo -e "\033[36m"
echo "# ====================================================================================="
echo "# Execute debootstram second stage and install base system"
echo "# ====================================================================================="
echo -e "\033[37m"
echo ""

# ********************************************************************************
# *** If running on ARM (OrangePI) USE THE LINE WITHOUT "qemu-arm-static" !!! ****
# ********************************************************************************
#if ! chroot $odir /bin/bash /second-stage; then
if ! chroot $odir /usr/bin/qemu-arm-static -cpu cortex-a9 /bin/bash /second-stage; then
    mv $odir/install.log . >> $_LOGFILE 2>&1
    echo "================================================"
    echo "ERROR on second-stage, instalation NOT FINISHED."
    echo "================================================"
    exit 1
fi

if [ ! -f $odir/_OK_ ]; then
    mv $odir/install.log . >> $_LOGFILE 2>&1
    echo "================================================"
    echo "ERROR on second-stage, instalation NOT FINISHED."
    echo "================================================"
    exit 1
fi

#======================================================================================

rm $odir/_OK_ #>> $_LOGFILE 2>&1
rm $odir/second-stage #>> $_LOGFILE 2>&1
rm $odir/params.sh #>> $_LOGFILE 2>&1
rm $odir/pkglist
mv $odir/install.log ./install-${distro}.log #>> $_LOGFILE 2>&1

echo "# === Copy scripts ========================"
cp fs_resize $odir/usr/local/bin
cp update_boot.sh $odir/usr/local/bin
cp install_to_emmc $odir/usr/local/bin
if [ ! "${ONLY_BASE}" = "yes" ] ; then
    cp install_lxde_desktop $odir/usr/local/bin
    cp install_mate_desktop $odir/usr/local/bin
    cp install_xfce_desktop $odir/usr/local/bin
fi
# =========================================

echo "# === Copy kernel, modules & scripts ============================================="
echo "# +++ Copy kernel, modeles & scripts" >> $_LOGFILE
mkdir -p $odir/boot >> $_LOGFILE 2>&1

rm -r $odir/boot/* >> $_LOGFILE 2>&1
cp orange/uImage_OPI* $odir/boot >> $_LOGFILE 2>&1

cp install_* $odir/usr/local/bin >> $_LOGFILE 2>&1
cp fs_resize $odir/usr/local/bin >> $_LOGFILE 2>&1

echo "if board opi-pc then"

if [ "${_board}" = "opi-pc" ] 
then
    echo "copy orange/uImage"
        cp orange/uImage $odir/boot/uImage >> $_LOGFILE 2>&1
        # cp orange/script.bin.OPI-* $odir/boot >> $_LOGFILE 2>&1
        if [ ! "${_boot_on_ext4}" = "yes" ] ; then
            cp orange/uImage $bootdir/uImage >> $_LOGFILE 2>&1
            cp orange/boot.scr $bootdir/boot.scr >> $_LOGFILE 2>&1
            cp orange/lib/sun8i-h3-orangepi-pc.dtb \
                $bootdir/sun8i-h3-orangepi-pc.dtb >> $_LOGFILE 2>&1
            # cp orange/uImage_OPI* $bootdir >> $_LOGFILE 2>&1
            # cp orange/script.bin.OPI-* $bootdir >> $_LOGFILE 2>&1
            # cp orange/script.bin.OPI-2_720p60_hdmi $bootdir/script.bin >> $_LOGFILE 2>&1
        fi
else
    if [ "${3}" = "opi-2" ] || [ "${4}" = "opi-2" ]; then
        cp orange/uImage_OPI-2 $odir/boot/uImage >> $_LOGFILE 2>&1
        cp orange/script.bin.OPI-2_* $odir/boot >> $_LOGFILE 2>&1
        if [ ! "${_boot_on_ext4}" = "yes" ] ; then
            cp orange/uImage_OPI-2 $bootdir/uImage >> $_LOGFILE 2>&1
            cp orange/script.bin.OPI-2_720p60_hdmi $bootdir/script.bin >> $_LOGFILE 2>&1
            cp orange/script.bin.OPI-2_* $bootdir >> $_LOGFILE 2>&1
        fi
    elif [ "${3}" = "opi-pc" ] || [ "${4}" = "opi-pc" ]; then
        cp orange/uImage_OPI-2 $odir/boot/uImage >> $_LOGFILE 2>&1
        cp orange/script.bin.OPI-PC_* $odir/boot >> $_LOGFILE 2>&1
        if [ ! "${_boot_on_ext4}" = "yes" ] ; then
            cp orange/uImage_OPI-2 $bootdir/uImage >> $_LOGFILE 2>&1
            cp orange/script.bin.OPI-PC_720p60_hdmi $bootdir/script.bin >> $_LOGFILE 2>&1
            cp orange/script.bin.OPI-PC_* $bootdir >> $_LOGFILE 2>&1
        fi
    elif [ "${3}" = "opi-plus" ] || [ "${4}" = "opi-plus" ]; then
        cp orange/uImage_OPI-PLUS $odir/boot/uImage >> $_LOGFILE 2>&1
        cp orange/script.bin.OPI-PLUS_* $odir/boot >> $_LOGFILE 2>&1
        if [ ! "${_boot_on_ext4}" = "yes" ] ; then
            cp orange/uImage_OPI-PLUS $bootdir/uImage >> $_LOGFILE 2>&1
            cp orange/script.bin.OPI-PLUS_720p60_hdmi $bootdir/script.bin >> $_LOGFILE 2>&1
            cp orange/script.bin.OPI-PLUS_* $bootdir >> $_LOGFILE 2>&1
        fi
    elif [ "${3}" = "opi-one" ] || [ "${4}" = "opi-one" ]; then
        cp orange/uImage_OPI-2 $odir/boot/uImage >> $_LOGFILE 2>&1
        cp orange/script.bin.OPI-ONE_* $odir/boot >> $_LOGFILE 2>&1
        if [ ! "${_boot_on_ext4}" = "yes" ] ; then
            cp orange/uImage_OPI-2 $bootdir/uImage >> $_LOGFILE 2>&1
            cp orange/script.bin.OPI-PC_720p60_hdmi $bootdir/script.bin >> $_LOGFILE 2>&1
        fi
    elif [ "${3}" = "opi-lite" ] || [ "${4}" = "opi-lite" ]; then
        cp orange/uImage_OPI-2 $odir/boot/uImage >> $_LOGFILE 2>&1
        cp orange/script.bin.OPI-LITE_* $odir/boot >> $_LOGFILE 2>&1
        if [ ! "${_boot_on_ext4}" = "yes" ] ; then
            cp orange/uImage_OPI-2 $bootdir/uImage >> $_LOGFILE 2>&1
            cp orange/script.bin.OPI-LITE_720p60_hdmi $bootdir/script.bin >> $_LOGFILE 2>&1
            sed -i '/8189es/c8189fs'  $odir/etc/modules 
        fi
    elif [ "${3}" = "opi-pcplus" ] || [ "${4}" = "opi-pcplus" ]; then
        cp orange/uImage_OPI-2 $odir/boot/uImage >> $_LOGFILE 2>&1
        cp orange/script.bin.OPI-PCPLUS_* $odir/boot >> $_LOGFILE 2>&1
        if [ ! "${_boot_on_ext4}" = "yes" ] ; then
            cp orange/uImage_OPI-2 $bootdir/uImage >> $_LOGFILE 2>&1
            cp orange/script.bin.OPI-PCPLUS_720p60_hdmi $bootdir/script.bin >> $_LOGFILE 2>&1
            sed -i '/8189es/c8189fs'  $odir/etc/modules 
        fi
    elif [ "${3}" = "opi-plus2e" ] || [ "${4}" = "opi-plus2e" ]; then
        cp orange/uImage_OPI-PLUS $odir/boot/uImage >> $_LOGFILE 2>&1
        cp orange/script.bin.OPI-PLUS2E_* $odir/boot >> $_LOGFILE 2>&1
        if [ ! "${_boot_on_ext4}" = "yes" ] ; then
            cp orange/uImage_OPI-PLUS $bootdir/uImage >> $_LOGFILE 2>&1
            cp orange/script.bin.OPI-PLUS2E_720p60_hdmi $bootdir/script.bin >> $_LOGFILE 2>&1
            sed -i '/8189es/c8189fs'  $odir/etc/modules 
        fi
    else
        cp orange/uImage_OPI-2 $odir/boot/uImage >> $_LOGFILE 2>&1
        cp orange/script.bin.OPI-* $odir/boot >> $_LOGFILE 2>&1
        if [ ! "${_boot_on_ext4}" = "yes" ] ; then
            cp orange/uImage_OPI-2 $bootdir/uImage >> $_LOGFILE 2>&1
            cp orange/uImage_OPI* $bootdir >> $_LOGFILE 2>&1
            cp orange/script.bin.OPI-* $bootdir >> $_LOGFILE 2>&1
            cp orange/script.bin.OPI-2_720p60_hdmi $bootdir/script.bin >> $_LOGFILE 2>&1
        fi
    fi
fi
echo "copy modules and firmware to $odir/lib"
cp -rf orange/lib/modules $odir/lib >> $_LOGFILE 2>&1
cp -rf orange/lib/firmware $odir/lib >> $_LOGFILE 2>&1

echo "change own $odir/lib"
chown -R root:root $odir/lib/* >> $_LOGFILE 2>&1

# ================================================================================
echo "sync"
sync

echo "remove files in dev, proc, run, sys, tmp"
rm -rf $odir/dev/*
rm -rf $odir/proc/*
rm -rf $odir/run/*
rm -rf $odir/sys/*
rm -rf $odir/tmp/*

echo ""

echo "# ***************"
echo "# Create fstab"
echo "# ***************"
echo "Creating \"fstab\""
echo "# OrangePI fstab" > $odir/etc/fstab
if [ "${_format}" = "btrfs" ] ; then
    echo "/dev/mmcblk0p2  /  btrfs subvolid=0,noatime,nodiratime,compress=lzo  0 1" >> $odir/etc/fstab
else
    echo "/dev/mmcblk0p2  /  ${_format}  errors=remount-ro,noatime,nodiratime  0 1" >> $odir/etc/fstab
fi
echo "/dev/mmcblk0p1  /media/boot  vfat  defaults  0 0" >> $odir/etc/fstab
echo "tmpfs /tmp  tmpfs nodev,nosuid,mode=1777  0 0" >> $odir/etc/fstab

sync

# ================================================
# IF CREATING IMAGE unmount and create final image
# ================================================
if [ ! "${sdcard}" = "" ]; then
    if [ ! "${_boot_on_ext4}" = "yes" ] ; then
      if ! umount -l $bootdir; then
	  echo "ERROR unmounting fat partition."
	  exit 0
      fi
      rm -rf $bootdir/* >> $_LOGFILE 2>&1
      rmdir $bootdir >> $_LOGFILE 2>&1
    fi
    if ! umount -l $odir; then
	echo "ERROR unmounting ${_format} partitions."
	exit 0
    fi
    rm -rf $odir/* >> $_LOGFILE 2>&1
    rmdir $odir >> $_LOGFILE 2>&1
    sync

    echo "Creating SDCard image..."
    dd if=${sdcard}u of=${sdcard} >> $_LOGFILE 2>&1
    if [ -f ${sdcard}1 ]; then
        dd if=${sdcard}1 of=${sdcard} bs=1M conv=notrunc oflag=append >> $_LOGFILE 2>&1
    fi
    if [ -f ${sdcard}2 ]; then
        dd if=${sdcard}2 of=${sdcard} bs=1M conv=notrunc oflag=append >> $_LOGFILE 2>&1
    fi

    if [ "${_compress}" = "yes" ]; then
        echo "Compressing image..."
        xz -z -k -9 -f -v $sdcard
        md5sum $sdcard > $sdcard.md5sum
        md5sum $sdcard.xz > $sdcard.xz.md5sum
    fi
fi

if [ "${_directsd}" = "yes" ] ; then
    if ! umount $odir; then
	echo "ERROR unmounting ${_format} partitions."
    fi
fi

echo ""
date
echo ""
echo "************************************************************"
echo "Instalation finished."
echo ""
if [ ! "${sdcard}" = "" ]; then
    echo "You have bootable OrangePI SD Card image \"${sdcard}\"."
    echo "Use dd to copy to your SDCard"
    echo "  e.g. sudo dd if=$sdcard of=/dev/<your_sdcard> bs=1M"
else
    if [ "${_directsd}" = "yes" ] ; then
        echo "You have OrangePI $distro instalation on $image_name."
    else
	if [ ! "${_boot_on_ext4}" = "yes" ] ; then
	    echo "Copy files from $bootdir to SD Card boot partition"
	    echo "  e.g.  cp $bootdir/* <path_to_sdcard_boot_mount>"
	    echo "  and rsync $odir to SD Card ext4 partition."
	    echo "  e.g. sudo rsync -r -t -p -o -g -x -v --progress --delete -l -H -D --numeric-ids -s $PWD/$odir/ <path_to_sdcard_ext4_mount>/"
	else
	    echo "Rsync files from $odir to SD Card ext4 partition"
	    echo "  e.g. sudo rsync -r -t -p -o -g -x -v --progress --delete -l -H -D --numeric-ids -s $PWD/$odir/ <path_to_sdcard_ext4_mount>/"
	fi
	echo ""
	echo "Or create SDCard image running:"
	echo "  sudo ./image_from_dir $odir <DEVICE|IMAGE>"
    fi
    echo ""
    echo "You can chroot into \"$odir\" to make additional changes:"
    if [ "${_directsd}" = "yes" ] ; then
        echo "  sudo mount $image_name $odir"
    fi
    echo "  sudo chroot $odir /usr/bin/qemu-arm-static -cpu cortex-a9 /bin/bash"
fi
echo ""
echo -e "\033[36m"
echo "************************************************************"
echo "* AFTER BOOTING:                                           *"
echo "* -------------------------------------------------------- *"
echo "* To RESIZE LINUX partition to fill sd card run:           *"
echo "*   sudo fs_resize                                         *"
echo "* -------------------------------------------------------- *"
echo "* To install to EMMC run:                                  *"
echo "*   sudo install_to_emmc                                   *"
echo "* -------------------------------------------------------- *"
echo "* To install desktop run:                                  *"
echo "*   sudo install_lxde_desktop                              *"
echo "*   or, for better-looking (wily&vivid&jessie)             *"
echo "*   sudo install_mate_desktop                              *"
echo "*   DON'T FORGET TO RESIZE SD CARD IF NECESSARY FIRST      *"
echo "* -------------------------------------------------------- *"
echo "* To configure your local settings use:                    *"
echo "*   sudo dpkg-reconfigure tzdata                           *"
echo "*   sudo dpkg-reconfigure keyboard-configuration           *"
echo "*   sudo dpkg-reconfigure console-setup                    *"
echo "*     # change your system's locale entries by modifying   *"
echo "*     # the file /etc/default/locale (e.g. en_US.UTF-8)    *"
echo "*     # then run:                                          *"
echo "*   sudo locale-gen <your_locale> (e.g en_US.UTF-8)        *"
echo "*   sudo dpkg-reconfigure locales                          *"
echo "************************************************************"
echo -e "\033[37m"
date
echo ""

exit 0
